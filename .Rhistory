runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(hourly_toll_data)
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
20 %in% 120
runApp()
View(hourly_toll_data)
hourly_toll_data %>% filter(weekday = 7, hours %in% c(7:9), total %in% c(215))
hourly_toll_data %>% filter(weekday == 7, hours %in% c(7:9), total %in% c(215))
runApp()
hourly_toll_data$exit_num[total %in% c(215)]
hourly_toll_data$exit_num[hourly_toll_data$total %in% c(215)]
runApp()
is.numeric(c(1:4))
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data$target_column)) {
return("Error: target_column requires numeric input")
} else {
filtered_data %<>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
View(hourly_toll_data)
get_on_off_plot_data(hourly_toll_data, "total", c(1:100))
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data$!!as.name(target_column))) {
return("Error: target_column requires numeric input")
} else {
filtered_data %<>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data$!!as.name(target_column))) {
return("Error: target_column requires numeric input")
} else {
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data$!!as.name(target_column))) {
return("Error: target_column requires numeric input")
} else {
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data$!!as.name(target_column))){
return("Error: target_column requires numeric input")
}else{
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
get_on_off_plot_data <- function(filtered_data, target_column, range){
# if(!is.numeric(filtered_data$!!as.name(target_column))){
#   return("Error: target_column requires numeric input")
# }else{
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
# }
return(filtered_data)
}
get_on_off_plot_data(hourly_toll_data, "total", c(1:100))
!!as.name("farp")
hourly_toll_data$!!as.name("total")
hourly_toll_data$as.name("total")
hourly_toll_data$!as.name("total")
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data %>% select(!!as.name(target_column)))){
return("Error: target_column requires numeric input")
}else{
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
get_on_off_plot_data(hourly_toll_data, "total", c(1:100))
class(hourly_toll_data$total)
class(hourly_toll_data %>% select(total))
class(hourly_toll_data %>% select(total) %>% pull())
get_on_off_plot_data <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data %>% select(!!as.name(target_column)) %>% pull())){
return("Error: target_column requires numeric input")
}else{
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
get_on_off_plot_data(hourly_toll_data, "total", c(1:100))
View(hourly_toll_data)
get_on_off_plot_data(hourly_toll_data, "exit_name", c(1:100))
runApp()
View(get_on_off_plot_data)
write_csv(aggregated_toll_data,
"Clean Data/aggregated_toll_data.csv")
runApp()
runApp()
runApp()
runApp()
filter_by_range <- function(filtered_data, target_column, range){
if(!is.numeric(filtered_data %>%
select(!!as.name(target_column)) %>%
pull())){
return("Error: target_column requires numeric input")
} else {
new_data <- filtered_data %>%
filter(!!as.name(target_column) %in% range)
}
return(filtered_data)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aggregated_toll_data <- toll_data %>%
mutate(trip_id = row_number()) %>%
gather(key = "action", # gather entrance and exit into a key/value pair to facilitate filtering in Shiny
value = "exit_num",
entrance, exit)
aggregated_toll_data %<>%
left_join(location_data,
by = "exit_num")
aggregated_toll_data %<>%
group_by(weekday, trip_id, hours, exit_num, exit_name, latitude, longitude, action) %>% # exit_num and exit_name included to retain values post summarise(), does not affect row counts
summarise(total = n()) %>%
ungroup() %>%
filter(!is.na(latitude))
aggregated_toll_data <- toll_data %>%
mutate(trip_id = row_number()) %>%
gather(key = "action", # gather entrance and exit into a key/value pair to facilitate filtering in Shiny
value = "exit_num",
entrance, exit)
aggregated_toll_data %<>%
left_join(location_data,
by = "exit_num")
aggregated_toll_data %<>%
group_by(weekday, trip_id, hours, exit_num, exit_name, latitude, longitude, action) %>% # exit_num and exit_name included to retain values post summarise(), does not affect row counts
summarise(total = n()) %>%
ungroup() %>%
filter(!is.na(latitude))
aggregated_toll_data %<>%
group_by(weekday, hours, exit_num, exit_name, latitude, longitude, action) %>% # exit_num and exit_name included to retain values post summarise(), does not affect row counts
summarise(total = n()) %>%
ungroup() %>%
filter(!is.na(latitude))
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance") ~ row_number(),
TRUE ~ row_number()-1)
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance") ~ !!row_number(),
TRUE ~ !!row_number()-1)
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance") ~ row_number(action),
TRUE ~ row_number(action)-1)
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance") ~ !!row_number(action),
TRUE ~ !!row_number(action)-1)
aggregated_toll_data %>%
mutate_(~trip_id = case_when(~action == "entrance") ~ row_number(~action),
TRUE ~ row_number(~action)-1)
mutate_(~trip_id = case_when(~action == "entrance" ~ row_number(~action),
TRUE ~ row_number(action)-1)
aggregated_toll_data %>%
mutate(trip_id = case_when(~action == "entrance" ~ row_number(action),
TRUE ~ row_number(action)-1))
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance" ~ row_number(action),
TRUE ~ row_number(action)-1))
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance" ~ row_number(),
TRUE ~ row_number()-1))
last_error()
rlang::last_error()
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance" ~ as.integer(row_number()),
TRUE ~ as.integer(row_number())-1))
aggregated_toll_data %>%
mutate(trip_id = case_when(action == "entrance" ~ as.integer(row_number()),
action == "exit" ~ as.integer(row_number())-1))
View(aggregated_toll_data)
aggregated_toll_data %>%
select(-trip_id) %>%
mutate(trip_id = case_when(action == "entrance" ~ as.integer(row_number()),
action == "exit" ~ as.integer(row_number())-1))
aggregated_toll_data <- toll_data %>%
mutate(trip_id = row_number()) %>%
gather(key = "action", # gather entrance and exit into a key/value pair to facilitate filtering in Shiny
value = "exit_num",
entrance, exit)
View(aggregated_toll_data)
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
aggregated_toll_data %>%
group_by(exit_num, weekday) %>%
nest() %>%
mutate(data = map(data, ~filter(., total == max(total)))) %>%
unnest()
aggregated_toll_data %>%
filter(total == max(total))
View(aggregated_toll_data)
aggregated_toll_data <- toll_data %>%
gather(key = "action", # gather entrance and exit into a key/value pair to facilitate filtering in Shiny
value = "exit_num",
entrance, exit)
aggregated_toll_data %<>%
left_join(location_data,
by = "exit_num")
aggregated_toll_data %<>%
group_by(weekday, hours, exit_num, exit_name, latitude, longitude, action) %>% # exit_num and exit_name included to retain values post summarise(), does not affect row counts
summarise(total = n()) %>%
ungroup() %>%
filter(!is.na(latitude))
aggregated_toll_data %>%
tst <- aggregated_toll_data %>%
tst <- aggregated_toll_data %>%
group_by(exit_num, weekday) %>%
nest() %>%
mutate(data = map(data,
function(aggregated_toll_data){
aggregated_toll_data %>%
filter(total == max(total))
})) %>%
unnest()
View(tst)
aggregated_toll_data %>% n_distinct(exit_num)
View(aggregated_toll_data)
n_distinct(aggregated_toll_data$exit_num)
52*7
tst <- aggregated_toll_data %>%
group_by(exit_num, weekday) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total))))
View(tst)
tst <- aggregated_toll_data %>%
group_by(exit_num, weekday) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest()
tst <- aggregated_toll_data %>%
group_by(exit_num, weekday) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest() %>%
distinct(exit_num, weekday, .keep_all = T)
View(tst)
tst <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest()
View(tst)
tst <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest() %>%
distinct(exit_num, .keep_all = T)
View(tst)
reduced_data <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest() %>%
distinct(exit_num, .keep_all = T)
reduced_data %>%
mutate(weekday = wday(weekday, label = T))
reduced_data %>%
mutate(weekday = wday(weekday, label = T)) %>%
arrange(desc(total))
get_busiest_days <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest() %>%
distinct(exit_num, .keep_all = T)
reduced_data %<>%
mutate(weekday = wday(weekday, label = T)) %>%
arrange(desc(total))
return(reduced_data)
}
get_busiest_days <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest() %>%
distinct(exit_num, .keep_all = T)
reduced_data %<>%
mutate(weekday = wday(weekday, label = T)) %>%
arrange(desc(total)) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
get_busiest_days(aggregated_toll_data)
get_busiest_days <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest()
reduced_data %<>%
mutate(weekday = wday(weekday, label = T)) %>%
arrange(desc(total)) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
get_busiest_days(aggregated_toll_data)
get_busiest_days(aggregated_toll_data) %>% filter(weekday == 1)
get_busiest_days(aggregated_toll_data) %>% filter(weekday == "Mon")
get_busiest_days <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(exit_num) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest()
reduced_data %<>%
arrange(desc(total)) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
runApp()
1 %in% c(1:1)
runApp()
runApp()
runApp()
runApp()
get_busiest_exit <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(weekday) %>%
nest() %>%
mutate(data = map(data,
~filter(., total == max(total)))) %>%
unnest()
reduced_data %<>%
arrange(desc(total)) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
get_busiest_exit(aggregated_toll_data)
?top_n
get_busiest_exit <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(weekday) %>%
nest() %>%
mutate(data = map(data,
~filter(., total %in% top_n(total, 3)))) %>%
unnest()
reduced_data %<>%
arrange(desc(total)) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
get_busiest_exit(aggregated_toll_data)
aggregated_toll_data %>%
filter(total %in% top_n(total, 3))
aggregated_toll_data %>%
filter(total %in% top_n(total, 3) %>% pull())
top_n(aggregated_toll_data$tot)
top_n(aggregated_toll_data$total)
?top_n
aggregated_toll_data %>%
top_n(3, total)
get_busiest_exit <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(weekday) %>%
nest() %>%
mutate(data = map(data,
~top_n(., 3, total))) %>%
unnest()
reduced_data %<>%
arrange(desc(total)) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
get_busiest_exit(aggregated_toll_data)
reduced_data %<>%
arrange(exit_num) %>%
select(exit_num, weekday, hours, exit_name, total)
get_busiest_exit <- function(aggregated_toll_data){
reduced_data <- aggregated_toll_data %>%
group_by(weekday) %>%
nest() %>%
mutate(data = map(data,
~top_n(., 3, total))) %>%
unnest()
reduced_data %<>%
arrange(exit_num) %>%
select(exit_num, weekday, hours, exit_name, total)
return(reduced_data)
}
get_busiest_exit(aggregated_toll_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
HTML()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("markdown")
install.packages("knitr")
install.packages("rmarkdown")
runApp()
runApp()
runApp()
library(tidyverse)
library(magrittr) # for %<>%
library(lubridate)
# Read Data ---------------------------------------------------------------
# Toll Data
toll_data <- read_csv("Raw Data/NYThruway_origin_and_dest.csv",
col_types = cols(Entrance = col_character(), # force read_csv to import cols as character to preserve trailing chars (e.g. Exit 48A)
Exit = col_character()
)
)
toll_data %<>%
select(date = Date, # remove unnecessary vars and rename for ease of work
entrance = Entrance,
exit = Exit,
time = `Interval Beginning Time`)
toll_data %<>%
separate(time, c("hours", "minutes"), sep = 2) %>%
mutate(hours = as.numeric(floor(as.numeric(hours) + as.numeric(minutes)/60)), # translate 15 minute intervals to hourly intervals
date = mdy(date), # format as date
weekday = wday(date)) %>% # get day of the week for plotting later. Left as a number for easy Shiny filtering
select(-minutes)
write_csv(toll_data, "Clean Data/clean_toll_data.csv")
# Location Data
location_data <- read_csv("Raw Data/Thruway_Interchanges_and_Exits.csv")
location_data %<>%
filter(str_detect(Route, "NYS Thruway") | str_detect(Route, "Berkshire Connector"), # filter for only data on the NY Thruway and Berkshire Connector
!str_detect(Exit, "TB")) %>% # remove data for toll barriers
select(exit_num = Exit, # remove unnecessary vars and rename for ease of work
milepost = Milepost,
latitude = Latitude,
longitude = Longitude,
exit_name = Description)
write_csv(location_data, "Clean Data/clean_location_data.csv")
# Format for Mapping ------------------------------------------------------
aggregated_toll_data <- toll_data %>%
gather(key = "action", # gather entrance and exit into a key/value pair to facilitate filtering in Shiny
value = "exit_num",
entrance, exit)
aggregated_toll_data %<>%
left_join(location_data,
by = "exit_num")
aggregated_toll_data %<>%
group_by(weekday, hours, exit_num, exit_name, latitude, longitude, action) %>% # exit_num and exit_name included to retain values post summarise(), does not affect row counts
summarise(total = n()) %>%
ungroup() %>%
filter(!is.na(latitude))
write_csv(aggregated_toll_data,
"Clean Data/aggregated_toll_data.csv")
shiny::runApp()
